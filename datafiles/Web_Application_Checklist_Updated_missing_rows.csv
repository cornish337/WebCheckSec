Category,Sub Category,Check Name,Completed,Hide By Default,Priority,Description of Issue,Tools,Links to Tools or how to run,Applicability / N/A,Sources,AVSS Mapping,CWE,NIST Mapping
GENERAL,Baseline checks and enumeration,Run ranger automation,No,No,3,,,,,,,,
,,"Directory, header, file and parameter enumeration",No,No,2,,,,,,,,
"Architecture, Design and Threat Modeling Requirements (V1)",SDLC,SDLC to address security in all development stages,,Yes,0,,,,,,1.1.1,,
,,Threat modelling is in place for all design changes or sprint planning,,Yes,0,,,,,,1.1.2,1053.0,
,,Verify all user stories consider security constraints (e.g. a user should be able to edit their profile but not others),,Yes,0,,,,,,1.1.3,1110.0,
,,Verify documentation and justification of trust boundaries,,Yes,0,,,,,,1.1.4,1059.0,
,,,,Yes,0,,,,,,1.1.5,1059.0,
,,,,Yes,0,,,,,,1.1.6,637.0,
,,,,Yes,0,,,,,,1.1.7,637.0,
,Authentication Architectural Requirements,Verify use of low privilege OS accounts for applications,,Yes,0,,,,,,1.2.1,250.0,
,,Verify communication between application components are authenticated,,Yes,0,,,,,,1.2.2,306.0,
,,Verify implementation of centralised security controls,,Yes,0,,,,,,1.2.3,306.0,
,,Verify availability of a secure coding checklist or policy for developers,,Yes,0,,,,,,1.2.4,306.0,
,Access Control Architecture Requirements,"Verify trusted enforcement points such as access control gateways, servers etc enforce access controls",,Yes,0,,,,,,1.4.1,602.0,
,,Verify chosen control solution is flexible to meet application requirements,,Yes,0,,,,,,1.4.2,284.0,
,,"Verify enforcement of principle of least privilege in functions, data files etc",,Yes,0,,,,,,1.4.3,272.0,
,,,,Yes,0,,,,,,1.4.4,284.0,
,,,,Yes,0,,,,,,1.4.5,275.0,
,Input and Output Architectural Requirements,,,Yes,0,,,,,,1.5.1,,
,,,,Yes,0,,,,,,1.5.2,,
,,,,Yes,0,,,,,,1.5.3,,
,,,,Yes,0,,,,,,1.5.4,,
,Cryptographic Architectural Requirements,,,Yes,0,,,,,,1.6.1,,
,,,,Yes,0,,,,,,1.6.2,,
,,,,Yes,0,,,,,,1.6.3,,
,,,,Yes,0,,,,,,1.6.4,,
,"Errors, Logging and Auditing Architectural Requirements",,,Yes,0,,,,,,1.7.1,,
,,,,Yes,0,,,,,,1.7.2,,
,Data Protection and Privacy Architectural Requirements,,,Yes,0,,,,,,1.8.1,,
,,,,Yes,0,,,,,,1.8.2,,
,Communications Architectural Requirements,,,Yes,0,,,,,,1.9.1,,
,,,,Yes,0,,,,,,1.9.2,,
, Malicious Software Architectural Requirements,,,Yes,0,,,,,,1.10.1,,
,Business Logic Architectural Requirements,,,Yes,0,,,,,,1.11.1,,
,,,,Yes,0,,,,,,1.11.2,,
,,,,Yes,0,,,,,,1.11.3,,
,Secure File Upload Architectural Requirements,,,Yes,0,,,,,,1.12.1,,
,,,,Yes,0,,,,,,1.12.2,,
,Configuration Architectural Requirements,,,Yes,0,,,,,,1.14.1,,
,,,,Yes,0,,,,,,1.14.2,,
,,,,Yes,0,,,,,,1.14.3,,
,,,,Yes,0,,,,,,1.14.4,,
,,,,Yes,0,,,,,,1.14.5,,
,,,,Yes,0,,,,,,1.14.6,,
 Authentication Verification Requirements (V2),Password Security Checks,Passwords should be 8 chars minimum (OWASP says 12 but we ignore that in favour of NCSC),No,No,2,,,,,,2.1.1,521.0,5.1.1.2
,,Passwords 64 chars or longer should be accepted,,No,2,,,,,,2.1.2,521.0,5.1.1.2
,,Passwords should be able to contain spaces and not be truncated,,No,2,,,,,,2.1.3,521.0,5.1.1.2
,,Passwords should be able to contain unicode characters,,No,2,,,,,,2.1.4,521.0,5.1.1.2
,,Users should be able to change their passwords,,No,2,,,,,,2.1.5,620.0,5.1.1.2
,,Password change functionality should require the old password,,No,2,,,,,,2.1.6,620.0,5.1.1.2
,,Passwords should be checked against breached passwords  list,,No,2,,,,,,2.1.7,521.0,5.1.1.2
,,A password strength meter should be supplied,,No,2,,,,,,2.1.8,521.0,5.1.1.2
,,No password complexity rules should be enforced,,No,2,,,,,,2.1.9,521.0,5.1.1.2
,,No periodic password rotation or history requirements should be enforced,,No,2,,,,,,2.1.10,263.0,5.1.1.2
,,Pasting into password prompts should not be blocked,,No,2,,,,,,2.1.11,521.0,5.1.1.2
,,Users should be able to view their masked password temporarily when entering it,,No,2,,,,,,2.1.12,521.0,5.1.1.2
,Authenticators ,"Anti-automation controls against authentication attempts (rate limits, delays, lockouts, CAPTCHA)",No,No,2,,,,,,2.2.1,307.0,5.2.2 / 5.1.1.2 / 5.1.4.2 / 5.1.5.2
,,Weak authenticators (SMS/email) should be limited to a secondary verification,,No,2,,,,,,2.2.2,304.0,5.2.10
,,Users should be notified after credential/email changes or risky log ins (ideally push notifications),,No,2,,,,,,2.2.3,620.0,
,,"Anti-impersonation measures should be in place (e.g. MFA, yubikey, client-side TLS)",,No,2,,,,,,2.2.4,308.0,5.2.5
,,When a credential service provider (CSP) and app verifying authentication are separate they should use mTLS,,No,2,,,,,,2.2.5,319.0,5.2.6
,,Verify replay resistence through OTP devices/authentcators or lookup code,,No,2,,,,,,2.2.6,308.0,5.2.8
,,Verify intent to authenticate through entry of an OTP token or button press on FIDO hardware,,No,2,,,,,,2.2.7,308.0,5.2.9
,Authenticator Lifecycle,"Initial passwords/auth codes should be random, 6+ char long and expire",No,No,2,,,,,,2.3.1,330.0,5.1.1.2 / A.3
,,U2F/FIDO MFA devices should be enrollable,,No,2,,,,,,2.3.2,308.0,6.1.3
,,Authenticator renewal instructions should be sent with sufficient time to renew time-based authenticators,,No,2,,,,,,2.3.3,287.0,6.1.4
,Credential Storage,"Passwords should be hashed, salted using an approved one way hashing algorithm (e.g. not MD5)",No,No,1,,,,,,2.4.1,916.0,5.1.1.2
,,Salt should be at least 32 bits in length,,No,1,,,,,,2.4.2,916.0,5.1.1.2
,,"If PBKDF2 is used, should be at least 100k iterations",,No,1,,,,,,2.4.3,916.0,5.1.1.2
,,"If Bcrypt is used, work factor should be at least 10",,No,1,,,,,,2.4.4,916.0,5.1.1.2
,,"Salt should be randomly generated securely (SP 800-131A), not shared with the user and stored separately",,No,1,,,,,,2.4.5,916.0,5.1.1.2
,Credential Recovery,Activation or recovery secret should not be sent in clear text to the user,No,No,2,,,,,,2.5.1,640.0,5.1.1.2
,,Password hints or secret questions should not be used,,No,2,,,,,,2.5.2,640.0,5.1.1.2
,,Password recovery should not reveal the current password,,No,2,,,,,,2.5.3,640.0,5.1.1.2
,,"Default or shared accounts should not be present (e.g. default Admin, root or sa accounts)",,No,2,,,,,,2.5.4,16.0,5.1.1.2 / A3
,,User should be notified of authenticator factors changing,,No,2,,,,,,2.5.5,304.0,6.1.2.3
,,"Forgotten password should use a secure recovery mechanism (e.g. OTP, mobile push etc)",,No,2,,,,,,2.5.6,640.0,5.1.1.2
,,If OTP/MFA is lost the user identity should be verified,,No,2,,,,,,2.5.7,308.0,6.1.2.3
,,Password reset tokens should not be predictable,,No,2,,,,,,-,,
,,Password reset flows should have rate limiting,,No,2,,,,,,-,,
,,Password reset host header poisoning,,No,2,,,,,,-,,
,,Insecure password reset flow (e.g. parameter manipulation to another user ID),,No,2,,,,,,,,
,,Password reset tokens should not be resuable,,No,2,,,,,,,,
,Lookup Secret Verifier (e.g. recovery codes),Lookup codes should only be usable once,No,No,2,,,,,,2.6.1,308.0,5.1.2.2
,,Lookup secrets should be random (112 bits entropy or salted with unique 32 bit salt + hashed),,No,1,,,,,,2.6.2,330.0,5.1.2.2
,,"Lookup secrets should be safe against offline attacks, such as having predictable/guessable values",,No,1,,,,,,2.6.3,310.0,5.1.2.2
,Out of Band Verifier (i.e. MFA),App/hardware MFA should be offered first over SMS,No,No,2,,,,,,2.7.1,287.0,5.1.3.2
,,Codes should expire within 10 minutes ,,No,2,,,,,,2.7.2,287.0,5.1.3.2
,,Codes should only be usable once,,No,2,,,,,,2.7.3,287.0,5.1.3.2
,,Codes should only be sent over a secure channel,,No,2,,,,,,2.7.4,523.0,5.1.3.2
,,Out of band verifer should only retain a hashed version of the code,,No,2,,,,,,2.7.5,256.0,5.1.3.2
,,Initial authenticator code should be securely generated with at least 20 bits entropy (e.g. >= 6 digit codes),,No,2,,,,,,2.7.6,310.0,5.1.3.2
,,SMS PUMPING CHECK,,,2,,,,,,,,
,One Time Verifier (Time based MFA),Time based OTPs should have a defined lifetime before expiring,No,No,2,,,,,,2.8.1,613.0,5.1.4.2 / 5.1.5.2
,,Symmetric keys used to verify OTPs should be stored in a key vault/hardware storage module,,No,1,,,,,,2.8.2,320.0,5.1.4.2 / 5.1.5.2
,,Approved crypto algorithms should be used for generation/verification of OTPs,,No,2,,,,,,2.8.3,326.0,5.1.4.2 / 5.1.5.2
,,Time based OTPs should only be usable once within the time period,,No,2,,,,,,2.8.4,287.0,5.1.4.2 / 5.1.5.2
,,If a time based OTP is reused in the time window it should be logged and the user notified,,No,2,,,,,,2.8.5,287.0,5.1.5.2
,,Physical OTP generators should be revocable if lost/stolen. This should apply to all sessions immediately.,,No,2,,,,,,2.8.6,613.0,5.2.1
,,Biometric authenticators are limited to only be usable as a secondary factor,,No,2,,,,,,2.8.7,308.0,5.2.3
,"Cryptographic Verifier (FIDO, smart cards)","Crypto keys should be stored on a TPM, vault or HSM",,No,1,,,,,,2.9.1,320.0,5.1.7.2
,,Challenge nonce is at least 64 bits in length and unique,,No,1,,,,,,2.9.2,330.0,5.1.7.2
,,Only approved crypto algorithms are used in generation/verification,,No,1,,,,,,2.9.3,327.0,5.1.7.2
,Service Authentication,"Intra-service secrets should not rely on unchanging credentials (e.g. passwords, API keys)",,No,1,,,,,,2.10.1,287.0,5.1.1.1
,,"If passwords are required for service authentication, default credentials should not be used (e.g. root/root)",,No,1,,,,,,2.10.2,255.0,5.1.1.1
,,Passwords should be stored with protection against offline recovery attacks,,No,1,,,,,,2.10.3,522.0,5.1.1.1
,,"Passwords,secrets, api keys should NOT  bestored within source code, instead in a key store or similar",,No,1,,,,,,2.10.4,798.0,
Session Management (v3),Session Management,Session tokens within URL parameters (or error messages),No,No,2,,,,,,3.1.1,598.0,
,Session Login,Login bypass,No,No,2,,,,,,-,,
,Session Binding,Application doesn't generate new session token on authentication,No,No,2,,,,,,3.2.1,384.0,7.1
,,Auth tokens with less than 64 bits of entropy,,No,2,,,,,,3.2.2,331.0,7.1
,,Auth tokens not stored securely (e.g. not a cookie or session storage),,No,2,,,,,,3.2.3,539.0,7.1
,,Auth tokens generated with poor cryptography,,No,2,,,,,,3.2.4,331.0,7.1
,Session Logout,Session Expiration after logout,No,No,2,,,,,,3.3.1,613.0,7.1
,,Application should force users to re-auth after an appropriate idle time,,No,2,,,,,,3.3.2,613.0,7.1
,,Application terminates other sessions after password change,,No,2,,,,,,3.3.3,613.0,
,,Users have option to log out on other devices (session fixation),,No,2,,,,,,3.3.4,613.0,7.1
,Cookies,Auth cookies should have the Secure attribute,No,No,2,,,,,,3.4.1,614.0,7.1.1
,,Auth cookies should have the HTTPOnly attribute,,No,2,,,,,,3.4.2,1004.0,7.1.1
,,Auth cookies have the SameSite attribute to prevent CSRF,,No,2,,,,,,3.4.3,16.0,7.1.1
,,Auth cookies have the __Host prefix,,No,2,,,,,,3.4.4,16.0,7.1.1
,,"If other apps are on the same domain, ensure the cookie path attribute uses a specific path",,No,2,,,,,,3.4.5,16.0,7.1.1
,Token-based,Application should allow users to revoke oauth tokens,No,No,2,,,,,,3.5.1,290.0,7.1.2
,,Application should use session tokens rather than static API keys/secrets,,No,2,,,,,,3.5.2,798.0,
,,Stateless session tokens should use signatures or encryption to protect against tampering or replay,,No,2,,,,,,3.5.3,345.0,
,JWT,"JWT issues (weak key, alg:None, sensitive information etc)",No,No,2,,,,,,-,,
,Reauthentication from Federation,Relaying parties should specify maximum authentication time to Credential Service Providers + should reauth user if,,No,1,,,,,,3.6.1,613.0,7.2.1
,,Credential Service Providers inform RPs of last auth event ,,No,1,,,,,,3.6.2,613.0,7.2.1
,Defenses Against Session Management Exploits,App ensures a full valid login before allowing sensitive transactions/account modifications (e.g. pre-MFA changes),No,No,2,,,,,,3.7.1,778.0,
Access Control (v4),General Access Control,Ensure access controls are enforced server-side (horizontal and vertical),No,No,2,,,,,,4.1.1,602.0,
,,User attributes used by access controls (e.g. your role) should not be able to be manipulated by end users,,No,2,,,,,,4.1.2,639.0,
,,Principle of least privilege - users should only be able to access functionality they need to,,No,2,,,,,,4.1.3,285.0,
,,Principle of deny by default - users should not be able to access services unless granted,,No,2,,,,,,4.1.4,276.0,
,,Access control should fail securely when errors occur,,No,2,,,,,,4.1.5,285.0,
,Account Enumeration,"Account Enumeration (password reset, login etc)",No,No,2,,,,,,-,,
,Operation Level Access Control,IDOR,No,No,2,,,,,,4.2.1,639.0,
,,Anti CSRF protection present,,No,2,,,,,,4.2.2,352.0,
,Other Access Control,Multi-factor authentication present for admin interfaces,No,No,2,,,,,,4.3.1,419.0,
,,"Directory listing should be disabled. .git, .svn, thumbs.db should also not be exposed",,No,2,,,,,,4.3.2,548.0,
,,Verify the app has additional authorization/segregation for higher value systems to enforce anti-fraud controls,,No,2,,,,,,4.3.3,732.0,
"Validation, sanitisation and encoding (v5)",Input Validation,HTTP Parameter Pollution,No,No,2,,,,,,5.1.1,235.0,
,,Mass Assignment,,No,2,,,,,,5.1.2,915.0,
,,Input Validation (whitelisting),,No,2,,,,,,5.1.3,20.0,
,,Input Validation (input is strongly typed. e.g. telephone numbers),,No,2,,,,,,5.1.4,20.0,
,,Open Redirect,,No,2,,,,,,5.1.5,601.0,
,Sanitisation/Sandboxing,Check WYSIWG editors are sanitised,No,No,2,,,,,,5.2.1,116.0,
,,Ensure data is sanitised (acceptable characters and length),,No,2,,,,,,5.2.2,138.0,
,,SMTP/IMAP Injection,,No,2,,,,,,5.2.3,147.0,
,,Usage of eval() or similar dynamic code execution functions,,No,2,,,,,,5.2.4,95.0,
,,Template Injection (Server-Side),,No,2,,,,,,5.2.5,94.0,
,,Template Injection (Client-Side),,No,2,,,,,,5.2.5,94.0,
,,SSRF,,No,2,,,,,,5.2.6,918.0,
,,XSS through SVG,,No,2,,,,,,5.2.7,159.0,
,,Sanitisation/sandboxing of template expression content (e.g. Markdown),,No,2,,,,,,5.2.8,94.0,
,Output Encoding/Injection Prevention,Should have relevant output encoding for the context (e.g. HTML escaping for user-facing web apps),No,No,2,,,,,,5.3.1,116.0,
,,Unicode issues,,No,2,,,,,,5.3.2,176.0,
,,"Stored, reflected and DOM XSS",,No,2,,,,,,5.3.3,79.0,
,,"SQL, HRM and NoSQL injection (ORM should be used)",,No,2,,,,,,5.3.4,89.0,
,,"SQL, HRM and NoSQL injection (Escaping if ORM not available)",,No,2,,,,,,5.3.5,89.0,
,,"JavaScript/JSON Injection (eval, remote JS includes, CSP bypasses and expression evaluation)",,No,2,,,,,,5.3.6,830.0,
,,LDAP Injection,,No,2,,,,,,5.3.7,943.0,
,,OS Command Injection,,No,2,,,,,,5.3.8,78.0,
,,Local and Remote File Inclusion,,No,2,,,,,,5.3.9,829.0,
,,XML and XPath Injection,,No,2,,,,,,5.3.10,643.0,
,,Prototype pollution,,No,2,,,,,,-,,
,Memory/String/Unmanaged Code,Memory safety issues (buffer/heap overflows),No,No,2,,,,,,5.4.1,120.0,
,,Format string issues,,No,2,,,,,,5.4.2,134.0,
,,Integer overflow issues,,No,2,,,,,,5.4.3,190.0,
,Deserialisation Prevention,Deserialization issues (lack of integrity checks or encryption),No,No,2,,,,,,5.5.1,502.0,
,,XML Entity Injection,,No,2,,,,,,5.5.2,611.0,
,,"Deserialization issues (JSON,XML,YAML)",,No,2,,,,,,5.5.3,502.0,
,,eval() used to parse JSON documents instead of JSON.parse(),,No,2,,,,,,5.5.4,95.0,
Stored Cryptography (V6),Data Classification,Sensitive data should be encrypted at rest (e.g. PII),No,No,2,,,,,,6.1.1,311.0,
,,Sensitive data should be encrypted at rest (e.g. Medical data),,No,2,,,,,,6.1.2,311.0,
,,Sensitive data should be encrypted at rest (e.g. Financial data),,No,2,,,,,,6.1.3,311.0,
,Algorithms (ADVANCED CRYPTO ISSUES),Padding Oracle Issues,No,No,2,,,,,,6.2.1,310.0,
,,No rolling your own crypto (algorithms should be industry standard),,No,2,,,,,,6.2.2,327.0,
,,"Cryptographic issues in IV, cipher and block mode configuration",,No,2,,,,,,6.2.3,326.0,
,,Random number/encryption/hashing algo rounds/ciphers/modes can be swapped easily,,No,2,,,,,,6.2.4,326.0,
,,"Insecure block/padding modes, small block sizes and weak hashing algos (SHA-1/MD5) in use",,No,2,,,,,,6.2.5,326.0,
,,IVs being reused,,No,2,,,,,,6.2.6,326.0,
,,"Ensure encrypted data is authenticated via signatures, ciphers or HMAC to prevent tampering",,No,2,,,,,,6.2.7,326.0,
,,Crypto operations should be constant time,,No,2,,,,,,6.2.8,385.0,
,Random Values,"Random values (e.g. UUIDs, random strings) should be generated using a secure method",No,No,2,,,,,,6.3.1,338.0,
,,UUIDs should be created using GUIDv4 + secure PSRNG,,No,2,,,,,,6.3.2,338.0,
,,Ensure random numbers have strong entropy even under heavy traffic,,No,2,,,,,,6.3.3,338.0,
,Secret Management,Key vault should be used to store secrets (e.g. Vault),,No,1,,,,,,6.4.1,798.0,
,,Key material shouldn't be exposed to application directly but use a vault for crypto operations,,No,1,,,,,,6.4.2,320.0,
Error Handling and Logging (V7),Log Content,"Application logs sensitive data (credentials, payment details)",,No,1,,,,,,7.1.1,532.0,
,,Application logs sensitive data (PII etc),,No,1,,,,,,7.1.2,532.0,
,,"Application should log security events (e.g. auth failures, input validation failures)",,No,1,,,,,,7.1.3,778.0,
,,Log events should include details for incident response,,No,1,,,,,,7.1.4,778.0,
,Log Processing,Application should log all authentication decisions including relevant metadata,,No,1,,,,,,7.2.1,778.0,
,,Application should log all access control decisions including relevant metadata,,No,1,,,,,,7.2.2,285.0,
,Log Protection,Log Injection (encoding),,No,1,,,,,,7.3.1,117.0,
,,Log Injection (viewing the logs should be escaped/safe),,No,1,,,,,,7.3.2,117.0,
,,Log tampering,,No,1,,,,,,7.3.3,200.0,
,,Logs have valid time zone (e.g. UTC if global),,No,1,,,,,,7.3.4,,
,Error Handling,"Errors should be generic during security sensitive events, with a unique identifier",No,No,2,,,,,,7.4.1,210.0,
,,Exception handling for unexpected error conditions,,No,2,,,,,,7.4.2,544.0,
,,Exception handling for unhandled exceptions,,No,2,,,,,,7.4.3,460.0,
Data Protection Requirements (V8),General Data Protection,No sensitive data cached (server-side),No,No,2,,,,,,8.1.1,524.0,
,,Cached data modification (on server) e.g. Cache Poisoning,,No,2,,,,,,8.1.2,524.0,
,,Application should minimise number of parameters per request,,No,2,,,,,,8.1.3,233.0,
,,Alerting for abnormal number of requests - Rate Limiting,,No,2,,,,,,8.1.4,770.0,
,,Lack of backups,,No,1,,,,,,8.1.5,19.0,
,,Security of data backups,,No,1,,,,,,8.1.6,19.0,
,Client-side Data Protection,Sensitive data should not be cached by browser,No,No,2,,,,,,8.2.1,525.0,
,,"Client-side storage should not contain sensitive data or PII (e.g. localstorage, cookies)",,No,2,,,,,,8.2.2,922.0,
,,Client-side storage should be cleared after logout,,No,2,,,,,,8.2.3,922.0,
,Sensitive Private Data,Ensure sensitive data is not sent in query parameters/URL,,No,1,,,,,,8.3.1,319.0,
,,Users should be able to request GDPR deletion/export,,No,1,,,,,,8.3.2,212.0,
,,Users should accept data privacy terms and conditions before their data is used,,No,1,,,,,,8.3.3,285.0,
,,Ensure sensitive data created/processed by the application has been identified,,No,1,,,,,,8.3.4,200.0,
,,Ensure accessing sensitve data is audited and logged.,,No,1,,,,,,8.3.5,532.0,
,,Sensitive data in memory is overwritten as soon as it is no longer required,,No,1,,,,,,8.3.6,226.0,
,,Ensure sensitive/private information is encrypted,,No,1,,,,,,8.3.7,327.0,
,,Ensure sensitive/private information is subject to data retention classification,,No,1,,,,,,8.3.8,285.0,
Communication (V9),Communication Security,Check TLS is in use,No,No,2,,,,,,9.1.1,319.0,
,,Check TLS only uses strong ciphers and hashing algorithms,,No,2,,,,,,9.1.2,326.0,
,,"Check older versions of TLS are disabled (TLS 1.0/1.1, SSL3 etc)",,No,2,,,,,,9.1.3,326.0,
,Request Smuggling,Request Smuggling,No,No,2,,,,,,-,,
,HTTP Misrouting,HTTP Misrouting,No,No,2,,,,,,-,,
,Server Communication Security,Connections to/from the app should use TLS certificates (e.g. to external services),,No,1,,,,,,9.2.1,295.0,
,,All inbound/outbound connection should use TLS (e.g. to internal database services),,No,1,,,,,,9.2.2,319.0,
,,All encrypted connections to external services involving sensitive info are authenticated,,No,1,,,,,,9.2.3,287.0,
,,Certificate revocation (OSCP) should be enabled,,No,1,,,,,,9.2.4,299.0,
,,Backend TLS failures should be logged,,No,1,,,,,,9.2.5,544.0,
Malicious Code Verification (V10),Code Integrity,Code analysis tool should be used  (e.g. SAST/DAST),,No,1,,,,,,10.1.1,749.0,
,Malicious Code Search,Application/libraries should not have telemetry without user permission,,No,1,,,,,,10.2.1,359.0,
,,Application requires unnecessary permissions (Permissions-Policy),,No,1,,,,,,10.2.2,272.0,
,,"Back-doors within software (e.g. hard coded credentials in third party libraries, default debugging code)",,No,1,,,,,,10.2.3,507.0,
,,"""Time bombs"" within software",,No,1,,,,,,10.2.4,511.0,
,,Other malicious code e.g. logic bombs within software,,No,1,,,,,,10.2.5,511.0,
,,"""Easter eggs"" within software",,No,1,,,,,,10.2.6,507.0,
,Deployed Application Integrity,Auto update feature should ensure updates are digitally signed + sent over secure channel,No,No,2,,,,,,10.3.1,16.0,
,,"Integrity protections in place (code signing, subresource integrity)",,No,2,,,,,,10.3.2,353.0,
,,Sub-domain takeovers,,No,2,,,,,,10.3.3,350.0,
Business Logic (v11),Business Logic Security,Ensure users can only conduct business logic steps in sequential order,No,No,2,,,,,,11.1.1,841.0,
,,Ensure users can only conduct business logic steps in a realistic human time,,No,2,,,,,,11.1.2,779.0,
,,Ensure application has appropriate limits for business actions (e.g. can't order 100 of the same item),,No,2,,,,,,11.1.3,770.0,
,,Ensure the application has anti-automation controls (e.g. rate limiting),,No,2,,,,,,11.1.4,770.0,
,,Ensure the application has business logic limits/validation,,No,2,,,,,,11.1.5,841.0,
,,"""Time of check to time of use"" (TOCTOU) issues or other race conditions for sensitive operations.",,No,2,,,,,,11.1.6,367.0,
,,Ensure application monitors for unusual events from a business logic perspective (e.g. events out of order),,No,2,,,,,,11.1.7,754.0,
,,Ensure the application has alerting for automated or unusual attacks,,No,2,,,,,,11.1.8,390.0,
File Handling (v12),File Upload,File upload sizes are not restricted,No,No,2,,,,,,12.1.1,400.0,
,,[CAREFUL RISK OF DOS] Zip bomb prevention,,No,2,,,,,,12.1.2,409.0,
,,Limits on how many files a user can upload (e.g. rate limit),,No,2,,,,,,12.1.3,770.0,
,File Integrity,Lack of validation on file types,No,No,2,,,,,,12.2.1,434.0,
,File Execution,Path traversal through user input (e.g. file names),No,No,2,,,,,,12.3.1,22.0,
,,Local file inclusion through user input,,No,2,,,,,,12.3.2,73.0,
,,Remote file inclusion through user input,,No,2,,,,,,12.3.3,98.0,
,,Reflective File Download,,No,2,,,,,,12.3.4,641.0,
,,OS-level Command Injection Through File Upload (e.g. in file name),,No,2,,,,,,12.3.5,78.0,
,,"Remote Code Execution Through FIle Upload (e.g. uploading JSP, ASP etc)",,No,2,,,,,,12.3.6,829.0,
,File Storage,File not stored outside the web root ,No,No,2,,,,,,12.4.1,922.0,
,,Lack of AV scanning on file uploads,,No,2,,,,,,12.4.2,509.0,
,File Download,"Server serves/accepts arbitrary file types (e.g. .bak files, .zip)",No,No,2,,,,,,12.5.1,552.0,
,,XSS through file upload (HTML/JS rendering when browsing to it),,No,2,,,,,,12.5.2,434.0,
,SSRF,SSRF through file upload/download,No,No,2,,,,,,12.6.1,918.0,
API and web service (V13),Generic Web Service Security (13.1),Verify app components all use same encoding/parsing measures to avoid parsing attacks,No,No,2,,,,,,13.1.1,116.0,
,,"Verify API URLS don't expose sensitive auth e.g. API keys, session tokens",,,2,,,,,,13.1.3,598.0,
,,"Verify authorization decisions are made at both URI, programmatic/router and resource level ",,,2,,,,,,13.1.4,285.0,
,,Verify requests with unexpected/missing content types are rejected,,,2,,,,,,13.1.5,434.0,
,REST (13.2),Ensure acceptable HTTP verbs are permitted e.g. normal users shouldn't be able to DELETE arbitrary things,No,No,2,,,,,,13.2.1,650.0,
,,Verify JSON schema validation occurs before accepting input,,,2,,,,,,13.2.2,20.0,
,,"Verify X-CSRF protection is in place (e.g. through origin header, csrf nonce)",,,2,,,,,,13.2.3,352.0,
,,Verify Content-Type of request is validated,,,2,,,,,,13.3.5,436.0,
,,Verify message headers/payload are validated in transit e.g. TLS or per-request signatures,,,2,,,,,,13.3.6,345.0,
,SOAP (13.3),Verify XSD schema validation is taking place to ensure document formatting,,No,1,,,,,,13.3.1,20.0,
,,Verify message payload is signed with WS-Security,,,1,,,,,,13.3.2,345.0,
,GraphQL (13.4),Query allow list/depth limiting in place to prevent DoS through nested queries,,No,1,,,,,,13.4.1,770.0,
,,Ensure authorization logic should be implemented at business logic layer instead of GraphQL layer,,,1,,,,,,13.4.2,285.0,
Configuration Vertification (V14),Build,"Application build and deployment occur in a secure, repeatable way (e.g. CI pipeline)",,No,1,,,,,,14.1.1,,
,,"Compiler protections in place for buffer overflow, DEP, etc.",,No,1,,,,,,14.1.2,120.0,
,,Server hardening,,No,1,,,,,,14.1.3,16.0,
,,Application and all dependencies can be automatically redeployed in a reasonable time,,No,1,,,,,,14.1.4,,
,,Administrators can verify the integrity of security configuration to detect tampering,,No,1,,,,,,14.1.5,,
,Dependency,"Out of date components (e.g. JS Libraries, web-server)",No,No,2,,,,,,14.2.1,1026.0,
,,Exposed documentation/sample code (unless intentional),,No,2,,,,,,14.2.2,1002.0,
,,Lack of SubResource Integrity,,No,2,,,,,,14.2.3,714.0,
,,External assets are sourced from reliable source (CloudFlare etc),,No,2,,,,,,14.2.3,829.0,
,,Lack of Software Inventory ,,No,1,,,,,,14.2.5,,
,,Lack of third-party library sandboxing,,No,1,,,,,,14.2.6,265.0,
,Unintended Security Disclosure,Verbose Error Messages,No,No,2,,,,,,14.3.1,209.0,
,,Debug/developer Modes Not Disabled,,No,2,,,,,,14.3.2,497.0,
,,Version Information Disclosure (e.g. x-powered-by),,No,2,,,,,,14.3.3,200.0,
,HTTP Security Headers,Lack of HTTP Strict Transport Security,No,No,2,,,,,,14.4.5,523.0,
,,Lack of Referrer Policy,,No,2,,,,,,14.4.6,116.0,
,,Lack X-Frame-Options AND CSP: frame-ancestors,,No,2,,,,,,14.4.7,346.0,
,,Lack of Content Security Policy,,No,2,,,,,,14.4.3,1021.0,
,,Content Security Policy Weaknesses,,No,2,,,,,,14.4.3,1021.0,
,,Lack of Content Type Header with safe charset (e.g. UTF8),,No,2,,,,,,14.4.1,173.0,
,,API responses without Content-Disposition: attachment,,No,2,,,,,,14.4.2,116.0,
,,Lack of Permissions Policy,,No,2,,,,,,10.2.2,272.0,
,,Lack of X-Content-Type-Options: nosniff,,No,2,,,,,,14.4.4,116.0,
,HTTP Request Header Requirements,Only valid HTTP methods should be accepted (e.g. no TRACE) and should log/alert on invalid HTTP requests,No,No,2,,,,,,14.5.1,749.0,
,,Origin header should NOT be used for authentication/access control decisions,,No,2,,,,,,14.5.2,346.0,
,,"Cross-origin resource sharing should have a whitelist of trusted domains, not null",,No,2,,,,,,14.5.3,346.0,
,,HTTP headers added by trusted proxies or similar should be authenticated by the application.,,No,2,,,,,,14.5.4,306.0,
Session Management (v3),JWT,"JWT issues (weak key, alg:None, sensitive information etc)",No,No,2,"Assess common JWT (JSON Web Token) vulnerabilities: ensure that the JWT is signed with a strong key and algorithm (no `alg: none` trick, no using HS256 with a trivial secret or with what should be an RS256 public key), that it doesn’t embed sensitive data in plaintext (like passwords or personal info in the token’s payload), and that token handling is secure (proper validation of signature and claims on the server). JWT-specific issues include algorithm confusion, missing signature verification, weak signing keys, overly long expiration, or including things in the token that give away info or should not be client-visible.

Todo: Description","- **Decode and Inspect**: Use jwt.io or another JWT library to decode the token. Look at header: ensure `alg` is not “none” (which means no signing). If `alg` is e.g. HS256 or RS256, that’s okay if keys are properly managed. Check payload: is there any PII or sensitive data like user’s roles (which is okay if validated, but if the client can see it, consider if that’s acceptable) or worse, something like a password hash or credit card info (should never be in token). Also see if `exp` claim exists and is reasonable (not like exp in year 2099). If `exp` is missing, token might never expire – issue.
- **Signature Verification**: Try to verify the token’s signature. If HS256, you’d need the secret – we might not have it, but you can attempt a brute force if it’s weak (not usually feasible unless it’s known small phrase). If RS256, you’d need the public key. Sometimes the app provides its public key via an endpoint or JWKS (JSON Web Key Set) if it’s a proper OIDC server. If available, use it to verify signature. This ensures the token is indeed properly signed by the server (and you could also then test changing something to see verification fails server-side as earlier). If “none” algorithm or if you can change alg to none and re-send token and it’s accepted, that’s a critical flaw (some libraries had this issue if misconfigured).
- **Test Algorithm Confusion**: If the token uses RS256, see if the server mistakenly accepts it as HS256 with the public key as the secret (an old JWT attack). This is hard without access but you could craft a token header changing alg to HS256 and sign with the server’s public key as the key. If the server doesn’t properly enforce algorithm, it might accept. This is a niche but known vulnerability in some implementations.
- **Check Key Management**: If possible, find out how the JWT signing key is managed. If it’s a hard-coded string like “secret”, that’s weak (there was an infamous incident where many JWTs used “secret” as key). We usually can’t see that externally unless brute force. But if trivial, you might break it by trying common words. If you can sign a token with “secret” and it’s accepted, the key is dangerously weak/default.
- **Claim Validation**: See if the server validates claims like `aud` (audience), `iss` (issuer). If you change those in the token (keeping signature valid), does the server care? If not, maybe a minor issue. If you can change `iat` or remove `exp` and it still works, the server might not be validating expiration. Try using an expired token (modify exp to a past time but sign with original key) and see if it’s rejected; it should be.

Todo: Tools","- **OWASP JWT Cheat Sheet** – Summarizes common JWT issues: use strong keys, always verify signature and claims, disallow `alg: none`, be cautious with token contents:contentReference[oaicite:103]{index=103}.
- **Auth0 JWT Attacks Blog** – Details the alg:none and RSA/HS256 confusion attacks, and importance of proper validation. It's a well-known reference for what can go wrong with JWT if implemented incorrectly.
- **CWE-347** – “Improper Verification of Cryptographic Signature” – applicable to accepting JWT without verifying signature or using `none`. Also **CWE-565** might apply for “Reliance on Cookies without Validation” if they just trust the JWT wholly. Essentially, these indicate the failures if JWT is not handled right.

Todo: Links","Only relevant if the app uses JWTs for session or auth. If not, skip. Many modern SPAs and mobile backends use JWT. Traditional web apps with cookies might not. Whenever JWT is in play, these checks are high priority because JWT flaws can lead to auth bypass or data exposure. So apply to APIs with Bearer tokens, OIDC tokens, etc.

Todo: Applicability","https://owasp.org/www-project-cheat-sheets/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html#vulnerabilities, https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/

Todo: Sources",-,TODO: CWE,TODO: NIST
Session Management (v3),Reauthentication from Federation,Relaying parties should specify maximum authentication time to Credential Service Providers + should reauth user if,No,No,2,"This refers to federated login (like SSO/OAuth/OIDC). When our app (relying party, RP) delegates auth to an Identity Provider (credential service provider, CSP), the RP should indicate to the IdP how fresh the authentication needs to be. For example, using OIDC parameter `max_age` to say “if the user last authenticated more than N minutes ago, force a re-login”. Also, if the IdP tells the RP that the last auth was long ago, the RP should enforce reauthentication for sensitive actions. Essentially, ensure that federated logins aren’t blindly accepted if stale. The RP should either request reauth after a timeout or have the IdP prompt the user again after a certain time. This prevents scenarios where a user stays logged in at the IdP for days and automatically logs into the RP without ever re-verifying credentials, which might be too lax for high-security apps.

Todo: Description","- **SSO Flow Analysis**: If the app uses SAML or OIDC for login, check the authentication requests. In OIDC, look for `max_age` parameter in the auth request the RP sends. If it's absent, that means by default the IdP could reuse a login indefinitely (depending on IdP config). If present, note the value (e.g., `max_age=3600` for one hour, meaning if last login at IdP >1h, user will be prompted again). In SAML, look for conditions like `ForceAuthn=true` or similar on the AuthnRequest. If the app is high-security, not using these might be a design issue.
- **Test Reauthentication**: If possible, log into the app via SSO, then remain idle until what you think the reauth policy should be (or simulate by fiddling with IdP session). Then try accessing a sensitive function. Does the app or IdP prompt for login again? If not, and if a long time has passed, maybe the RP isn’t enforcing any max age. For example, if you have an IdP session from yesterday and you log into the RP today and it doesn’t ask you to log in again at IdP, and the app itself doesn’t ask for a password, that might violate a stricter security requirement (depending on context). For test, sometimes you can include `max_age=0` manually to see if IdP forces login.
- **Claims Inspection**: In OIDC, the ID Token often has an `auth_time` claim (time the user last authenticated at IdP). Check if the RP is using it. Hard to see externally, but if you decode the ID token, you'll see `auth_time`. If the app never asks you to re-login even though `auth_time` is far in the past, they likely aren’t using it to enforce fresh login for sensitive actions.
- **Policy Check**: If this is a regulated or sensitive app, there might be a policy like “users must re-authenticate after 12 hours even if SSO”. Check documentation or ask about reauth requirements. If the app doesn’t align (no max_age set, never reauths), that’s a point to raise.

Todo: Tools","- **OWASP ASVS 4.2.4** – Talks about reauthentication requirements for sensitive transactions and suggests that federated setups should respect those (for instance, not letting an IdP’s long-lived session bypass an RP’s need for a fresh login).
- **NIST SP 800-63B Section 7.2.1** – Federation guidelines mention that RPs can request a fresh assertion or set a maximum acceptable authentication age. NIST suggests that high assurance sessions have limitations on reuse of old logins.
- **SAML/OIDC Best Practices** – Both protocols allow for forcing a new login. E.g., SAML’s `<AuthnRequest ForceAuthn=""true""/>` ensures IdP asks user to log in again. OIDC’s `max_age` and `prompt=login` do similarly. Best practice in security-critical apps is to use these for actions or periodically.

Todo: Links","Only applicable for applications using federated identity (SAML, OAuth2/OIDC, etc.). If not using that, mark N/A. Within that, it’s especially relevant if the IdP sessions are long and the app is sensitive. If the app is low-risk and users value seamless SSO more, they might intentionally not set this – but from a strict security view, lack of any reauth on federation can be noted. It’s more a design choice but ASVS seems to encourage it. So, use judgement based on app sensitivity.

Todo: Applicability","https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest (see max_age), https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf (ForceAuthn in SAML AuthnRequest)

Todo: Sources",3.6.1,TODO: CWE,TODO: NIST
Session Management (v3),Reauthentication from Federation,Credential Service Providers inform RPs of last auth event,No,No,2,"This item complements the previous one: The Identity Provider (Credential Service Provider, CSP) should communicate to the Relying Party (RP) the time of the user’s last authentication (often via an `auth_time` claim in OIDC or SessionIndex in SAML). The RP should use that information to decide if the current session is too old and require reauth. Essentially, ensure that in a federated login, the IdP is providing a timestamp of when it last verified the user (not just when the token was issued), and that the RP is aware of it. This helps the RP enforce its policies (like requiring re-login every X hours). Without it, the RP can’t know if the user has recently authenticated or if the IdP just silently used an old session. So, check that such info is present and (ideally) used.

Todo: Description","- **Token/Assertion Inspection**: For OIDC, decode the ID Token and look for the `auth_time` field. For SAML, in the SAML assertion, look at the `<AuthnStatement AuthnInstant=""..."">` which gives the timestamp of authentication. Verify these exist. If not present, the IdP may not be configured to include it (OIDC requires `max_age` request or specific config to always include auth_time if necessary). The presence of `auth_time` is good; absence might indicate the RP can’t enforce age rules (unless it always requires fresh login via prompt=login or something when needed).
- **RP Application Behavior**: Hard to directly test if RP uses auth_time, but if you have a scenario: log in via SSO, note the auth_time from token. If you reuse the SSO after a long time, does the application ask you to login again (implying it considered auth_time too old)? Possibly try to manipulate a scenario: If you can craft an ID token with a very old auth_time (not straightforward without signing keys, so likely no). Instead, rely on design knowledge: ask developers or see documentation if the RP has a setting like “maximum IdP session reuse duration”. If the IdP is under same company, check if they include auth_time by default.
- **NIST Compliance Inquiry**: If this is all derived from NIST guidelines, maybe the org has a statement like “Our IdP includes auth_time in tokens, and RPs enforce reauth after 12h”. If yes, verify if it’s happening. If tokens clearly have auth_time and the RP had the earlier logic, then likely they consider it.
- **Logging**: As a stretch, if you have access to logs (or maybe the JWT is stored in local storage or cookie), see if the application logs or records the auth_time anywhere. Unlikely though; usually it's internal.

Todo: Tools","- **NIST SP 800-63C** (Federation) – Recommends that IdPs provide the RP with the time of authentication and level of assurance so the RP can make informed decisions. `auth_time` in OIDC is directly from these guidelines for federation.
- **OWASP ASVS** – Touched on previous item: essentially if the RP sets max_age, the IdP must supply auth_time to comply. ASVS expects that interplay as part of secure session mgmt in federated scenario.
- **OIDC Core Spec** – The `auth_time` claim definition: if an RP requests it (or certain conditions), the IdP will include it. The RP can then use it to ensure the user authenticated recently enough.

Todo: Links","Again, only for federated login setups. If applicable, it's somewhat an implementation detail between IdP and RP, but it's a necessary piece for high security RPs. If the app is standalone or uses its own login, N/A. If using third-party IdP (like Google login for a low-risk app), usually Google will include auth_time by spec but the app may not care. It’s more critical for enterprise setups with compliance requirements. So apply accordingly.

Todo: Applicability","https://openid.net/specs/openid-connect-core-1_0.html#IDToken (auth_time claim), https://pages.nist.gov/800-63-3/sp800-63c.html#assertion

Todo: Sources",3.6.2,TODO: CWE,TODO: NIST
Session Management (v3),Defenses Against Session Management Exploits,App ensures a full valid login before allowing sensitive transactions/account modifications (e.g. pre-MFA changes),No,No,2,"This means the application should require that the user has fully authenticated (and possibly re-authenticated) before performing highly sensitive actions, especially those that could be attempted by a partially authenticated or session-hijacked user. For example, some apps may have flows where part of the session is authenticated via a token link (like email verification) but not fully logged in – the app should ensure the user actually logs in or provides credentials before critical operations. Another angle: if the app uses MFA (multi-factor auth), ensure that the second factor was completed for sensitive actions (like changing password, editing account settings). Essentially, double-check that no sensitive function can be executed on a session that hasn’t gone through complete auth checks (username+password and MFA if applicable). This defends against session fixation or CSRF in flows before login is finalized.

Todo: Description","- **Workflow Analysis**: Identify if there are any multi-step auth processes. E.g., account recovery, email verification flows, or MFA enrollment steps. During those flows, see if any sensitive action can be done in parallel or by abusing the partially authenticated session. For instance, if you click a password reset link (which gives some session state often), does that session let you directly access account settings without logging in? It shouldn’t – you should only be able to reset password, nothing else.
- **MFA Checks**: If MFA is optional or only for certain actions, test performing a sensitive action without completing MFA. E.g., log in with just password (if app allows skipping MFA or it’s not enforced for all) and then try to change a security setting. Or if MFA is supposed to be enforced for that, see if it's possible to circumvent (like directly call the endpoint with the session that didn’t do MFA). The app should respond with “additional auth needed” if properly implemented.
- **Session States**: If the application has a concept of “partially logged in” (maybe after username+password but before OTP), ensure that state is tracked and sensitive operations check for “fully authenticated” flag. One can sometimes find clues in session or tokens (a claim like `amr` for authentication methods used). If your session cookie changes or gains attributes after MFA, that’s good. If not, and you can skip MFA for some action, that’s a hole.
- **Testing CSRF/Session Fixation together**: In some forgot-password flows, you can do session fixation: e.g., open a session, send password reset link to victim, if victim clicks, they might be logged in under a session you control but maybe not fully recognized as such by the app in some corner case. The app should require a fresh login after such flow or at least treat that session specially. Try odd sequences like using a token link, then browsing site as if logged in. If you find any weird access, that’s an issue.

Todo: Tools","- **OWASP ASVS 2.2.3 & 2.2.5** – These talk about requiring re-authentication or step-up auth for sensitive actions (like changing password or viewing sensitive data). It implies that just being “logged in” isn’t enough for certain actions – you might need to provide credentials again or have done MFA. The app should enforce full auth.
- **NIST 800-63B** – Recommends re-verification of user for sensitive transactions (e.g., prompt for password again or have recently logged-in check). It also says if a session hasn’t done MFA and the action requires it, the user must do MFA first.
- **OWASP Top 10 – A2 Broken Auth**: A partial session that can do things as if fully auth’d would be considered a broken auth scenario. Ensuring full valid login (including all factors) before critical changes is a measure to counter that.

Todo: Links","Applies to applications with multi-step auth (MFA, password resets, email verification links) or particularly sensitive features (changing email, password, downloading personal data, etc.). If the app is basic and once you’re logged in with password you have no second factor or partial states, then main thing is maybe requiring password again for critical actions. That’s common in financial or high-security apps (e.g., “enter your password to confirm this transfer”). If the app has none of those flows or second factors, this may be less applicable. Still, any sensitive function might ideally have a reauth; check if that’s expected. Otherwise, if not in design, not applicable as a “lack” unless risk demands it.

Todo: Applicability","https://owasp.org/ASVS/Authentication_Verification_Requirements#v223-mfa-before-sensitive-operations, https://pages.nist.gov/800-63-3/sp800-63b.html#reauthentication

Todo: Sources",3.7.1,TODO: CWE,TODO: NIST
