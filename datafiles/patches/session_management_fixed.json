[
  {
    "category": "Session Management (v3)",
    "subcats": [
      {
        "name": "Session token & cookie configuration",
        "items": [
          {
            "title": "Cookie attributes & scoping (Secure, HttpOnly, SameSite, Path/Domain, __Host-/__Secure-)",
            "desc": "Ensure session cookies are set with Secure and HttpOnly, use an appropriate SameSite policy (Strict/Lax for browser-based sessions; None only when cross-site flows are strictly required and TLS is enforced), and are narrowly scoped by Path/Domain. Prefer __Host- cookies (no Domain, Path=/, Secure) to prevent subdomain abuse. Session identifiers must not be set/read via JavaScript unless there is a compelling, documented reason.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes;https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies;https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf",
            "tools": "Burp Proxy (inspect Set-Cookie); Chrome/Firefox DevTools (Application/Storage → Cookies); ZAP HUD; Nuclei templates (cookie flags);",
            "applic": "N/A if the application is strictly token-in-header (Authorization: Bearer) with no cookies set by the app AND CORS is locked down (no credentialed cross-site requests). Otherwise applicable.",
            "tags": [
              "session",
              "cookies",
              "browser",
              "burp",
              "zap",
              "wstg"
            ],
            "asvs": "ASVS v5 V3.3 Cookie Setup; V7.* session protections",
            "sources": "WSTG-SESS-02; MDN Cookie Security; ASVS 5.0 cookie setup guidance",
            "priority": 3,
            "subtasks": [
              {
                "text": "Log in and capture responses; record all Set-Cookie attributes (name/value truncated, Secure/HttpOnly/SameSite/Path/Domain).",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify SameSite behavior by issuing a cross-site request (different Origin) and observing whether cookies are sent.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Confirm no session cookies are set via document.cookie; if they are, justify and document.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Prefer __Host- prefix for primary session cookie (Path=/, no Domain, Secure).",
                "done": false,
                "hidden": false
              },
              {
                "text": "Flag any cookie without Secure/HttpOnly, or with overly broad Domain/Path.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "No session tokens in URLs/HTML/storage; prevent leakage via caching and referrers",
            "desc": "Session IDs must never appear in URLs, HTML, logs, or client storage where they can leak via Referer headers, browser history, or shared caches. Responses containing secrets should be served with appropriate cache controls (e.g., Cache-Control: no-store).",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables;https://owasp.org/www-project-web-security-testing-guide/stable/",
            "tools": "Burp (Proxy/Logger → search for session values); ZAP; Grep server logs for patterns;",
            "applic": "Applicable to all web apps with sessions; N/A only if the app is fully stateless and never issues or persists any session/token-like values.",
            "tags": [
              "session",
              "cookies",
              "cache",
              "referrer",
              "logging"
            ],
            "asvs": "ASVS v5 V7 (session safety) & V3 (frontend cache controls)",
            "sources": "WSTG-SESS-04; WSTG stable index",
            "priority": 3,
            "subtasks": [
              {
                "text": "Search Proxy/HTTP history and DOM for token patterns (session IDs, JWTs).",
                "done": false,
                "hidden": false
              },
              {
                "text": "Check response headers for Cache-Control: no-store and Pragma: no-cache where appropriate.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify session identifiers do not appear in links, redirects, or error pages.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "Session identifier strength & rotation",
        "items": [
          {
            "title": "Token randomness (analyze with Burp Sequencer)",
            "desc": "Session tokens must be unpredictable. Capture many tokens and assess entropy using statistical tests. Low randomness increases hijacking risk.",
            "links": "https://portswigger.net/burp/documentation/desktop/testing-workflow/session-management/analyzing-session-token-generation;https://portswigger.net/burp/documentation/desktop/tools/sequencer",
            "tools": "Burp Sequencer (live capture + analysis);",
            "applic": "Applicable when the app issues tokens (cookies, anti-CSRF tokens, password-reset tokens). N/A for systems that do not issue session-like values.",
            "tags": [
              "session",
              "entropy",
              "burp",
              "sequencer"
            ],
            "asvs": "ASVS v5 V7.* Token strength/randomness",
            "sources": "PortSwigger Sequencer docs",
            "priority": 3,
            "subtasks": [
              {
                "text": "Send the Set-Cookie response to Sequencer and start live capture.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Collect a statistically significant sample; run analysis and review test p-values.",
                "done": false,
                "hidden": false
              },
              {
                "text": "If patterns/low entropy appear, recommend cryptographically secure RNGs and longer identifiers.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "Session fixation resistance (rotate on auth & privilege change)",
            "desc": "A new session identifier MUST be issued after successful authentication and on privilege elevation to prevent fixation and privilege splicing.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation;https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf",
            "tools": "Burp (Proxy/Comparer) to confirm cookie value changes at login and after role change.",
            "applic": "Applicable to any authenticated experience.",
            "tags": [
              "session",
              "rotation",
              "fixation",
              "burp",
              "wstg"
            ],
            "asvs": "ASVS v5 V7.2 (token issuance/rotation on auth)",
            "sources": "WSTG-SESS-03; ASVS 5.0",
            "priority": 3,
            "subtasks": [
              {
                "text": "Capture pre-auth session cookie; authenticate; confirm a new cookie value is set.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Trigger a privilege change (e.g., enable admin mode) and verify rotation again.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Ensure old tokens are invalidated server-side.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "Lifecycle & termination",
        "items": [
          {
            "title": "Logout invalidation (server-side) & single sign-out",
            "desc": "Logging out must invalidate the server-side session and any refresh tokens. Reusing the old token must fail. In SSO, sign-out should propagate as appropriate.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality",
            "tools": "Burp (Repeater) to replay old cookies; browser tests; CSRF PoC generator to probe state‑changing actions post-logout;",
            "applic": "Applicable to all apps that expose a logout or session end.",
            "tags": [
              "session",
              "logout",
              "invalidate",
              "burp",
              "wstg"
            ],
            "asvs": "ASVS v5 V7.4 (termination)",
            "sources": "WSTG-SESS-06",
            "priority": 3,
            "subtasks": [
              {
                "text": "Log in, capture session cookie; log out; replay a previously valid request with the old cookie (expect 401/redirect to login).",
                "done": false,
                "hidden": false
              },
              {
                "text": "If using SSO, verify single sign-out across relying parties.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "Idle & absolute timeouts",
            "desc": "Enforce an inactivity (idle) timeout and a maximum (absolute) lifetime. Tokens beyond either threshold must become unusable.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout",
            "tools": "Manual timing with Burp/Browser; automation where possible.",
            "applic": "Applicable for user sessions. N/A for short-lived, one-off signed URLs where no server-side session exists.",
            "tags": [
              "session",
              "timeout",
              "idle",
              "absolute",
              "wstg"
            ],
            "asvs": "ASVS v5 V7.3 (expiration/timeouts)",
            "sources": "WSTG-SESS-07",
            "priority": 3,
            "subtasks": [
              {
                "text": "Measure auto‑logout after inactivity.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify old tokens are rejected after absolute lifetime.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Check that timeout is enforced server-side (not just UI).",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "Concurrent session policy",
            "desc": "Define and enforce whether multiple active sessions per user are allowed, capped, and revocable (e.g., a ‘sessions’ page to view/kill sessions).",
            "links": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/11-Testing_for_Concurrent_Sessions;https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf",
            "tools": "Multi-browser/device testing; Burp to replay cookies from different clients.",
            "applic": "N/A if the platform explicitly supports only one ephemeral session (e.g., device‑bound flow) and enforces this.",
            "tags": [
              "session",
              "concurrency",
              "policy",
              "wstg"
            ],
            "asvs": "ASVS v5 V7.1.2 (document/limit concurrent sessions)",
            "sources": "WSTG-SESS-11; ASVS 5.0",
            "priority": 2,
            "subtasks": [
              {
                "text": "Log in from two browsers; observe whether both remain valid.",
                "done": false,
                "hidden": false
              },
              {
                "text": "If policy disallows, confirm the first session is invalidated or forced logoff.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify presence and behavior of ‘active sessions’ management UI.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "JWT / self-contained tokens",
        "items": [
          {
            "title": "JWT correctness (alg/keys/claims/expiry) & library safety",
            "desc": "Disable ‘alg=none’; require strong algorithms (e.g., RS256/ES256 with proper keys), validate iss/aud/exp/nbf, keep expiries short, and verify library versions against known flaws. Refresh tokens must be bound and revocable.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens;https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html",
            "tools": "Burp JWT Editor / JWT4B; decode/verify with CLI libs;",
            "applic": "Applicable whenever JWTs are used (cookies or Authorization header).",
            "tags": [
              "jwt",
              "tokens",
              "burp",
              "libraries"
            ],
            "asvs": "ASVS v5 V1.2/V1.3 (encoding/sanitization ordering) and V7.* (session/token handling) as applicable",
            "sources": "WSTG-SESS-10; OWASP JWT Cheat Sheet; Burp JWT Editor",
            "priority": 3,
            "subtasks": [
              {
                "text": "Intercept JWTs; verify header/alg; ensure ‘none’ is rejected.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Validate iss/aud/exp/nbf; check expiration windows.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Attempt typical JWT attacks with Burp JWT tools (kid confusion, alg tampering) in a safe test environment.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "Token storage & CSRF trade‑offs",
            "desc": "If JWTs live in cookies, enforce SameSite and HttpOnly and protect state‑changing requests against CSRF. If stored in web storage, you reduce CSRF risk but increase XSS impact—ensure strong XSS defenses. Many systems keep access tokens in memory and use HttpOnly cookies only for refresh tokens.",
            "links": "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html;https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies",
            "tools": "Browser DevTools; Burp;",
            "applic": "Applicable when JWTs or similar tokens are present.",
            "tags": [
              "jwt",
              "csrf",
              "xss",
              "cookies",
              "storage"
            ],
            "asvs": "ASVS v5 V1/V2 (encoding/validation) & V7 (session)",
            "sources": "OWASP XSS & CSRF Cheat Sheets; MDN Cookie Security",
            "priority": 2,
            "subtasks": [
              {
                "text": "Check where tokens live (cookie vs storage).",
                "done": false,
                "hidden": false
              },
              {
                "text": "If in cookies, verify SameSite/HttpOnly/Secure; if in storage, ensure robust XSS controls and CSP.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Confirm refresh token rotation and revocation.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "CSRF protections",
        "items": [
          {
            "title": "Anti‑CSRF for all state‑changing requests",
            "desc": "State‑changing (unsafe) requests require a server‑validated anti‑CSRF control (synchronizer token, double submit, or framework‑built) and must check Origin/Referer when feasible. SameSite helps but is not a complete control.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html;https://portswigger.net/burp/documentation/desktop/tools/engagement-tools/generate-csrf-poc",
            "tools": "Burp ‘Generate CSRF PoC’; CSRF Scanner (BApp);",
            "applic": "N/A only if the app never uses cookies/HTTP auth for ambient authority and all sensitive endpoints require explicitly supplied per‑request tokens/headers with CORS locked down.",
            "tags": [
              "csrf",
              "burp",
              "tokens",
              "wstg"
            ],
            "asvs": "ASVS v5 V3 & V7 (frontend/session) depending on architecture",
            "sources": "WSTG-SESS-05; CSRF Cheat Sheet; Burp CSRF PoC",
            "priority": 3,
            "subtasks": [
              {
                "text": "Enumerate unsafe endpoints; verify token presence and server validation.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Use Burp to generate PoCs and validate exploitability.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Check Origin/Referer validation and SameSite correctness.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "Advanced session risks",
        "items": [
          {
            "title": "Session puzzling / overloading",
            "desc": "Detect session variable overloading and flows that let an attacker set session context before authentication to bypass checks or escalate privileges.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling",
            "tools": "Burp (Proxy/Repeater); code review (if available).",
            "applic": "Applicable to stateful apps with complex session context.",
            "tags": [
              "session",
              "logic",
              "wstg"
            ],
            "asvs": "ASVS v5 V7 (session state) and V2/V3 (logic/frontend) where relevant",
            "sources": "WSTG-SESS-08",
            "priority": 2,
            "subtasks": [
              {
                "text": "Map pre‑auth and post‑auth flows; look for shared session variables.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Attempt to set identity‑related session keys pre‑auth; access privileged paths.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Confirm server resets context at auth.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "Session hijacking prevention (mixed content, HSTS, cookie scope)",
            "desc": "Verify full HTTPS with HSTS (ideally includeSubDomains), no mixed content, and conservative cookie Domain/Path to limit theft across subdomains.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking;https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/Cookies",
            "tools": "Browser DevTools (Security tab); Burp;",
            "applic": "Applicable to any browser-delivered session.",
            "tags": [
              "session",
              "hsts",
              "cookies",
              "wstg"
            ],
            "asvs": "ASVS v5 V3 (frontend TLS/HSTS) & V7 (session)",
            "sources": "WSTG-SESS-09; MDN Cookie Security",
            "priority": 2,
            "subtasks": [
              {
                "text": "Check HSTS headers and preload status; verify no HTTP endpoints are reachable.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Confirm no mixed content on authenticated pages.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Validate cookie Domain/Path aren’t overly broad.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      }
    ]
  },
  {
    "category": "Validation, sanitisation and encoding (v5)",
    "subcats": [
      {
        "name": "Input validation fundamentals",
        "items": [
          {
            "title": "Central, server‑side positive validation (allow‑lists, schema)",
            "desc": "Validate all untrusted inputs at a trusted service layer using positive rules—types, ranges, formats—and, for APIs, JSON/XML schemas where feasible. Client‑side checks are for UX only.",
            "links": "https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf;https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html;https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/README",
            "tools": "Manual review of controllers/validators; Semgrep for missing validation patterns;",
            "applic": "Always applicable to user‑ or system‑supplied data (query params, body, headers, cookies, files, webhooks, upstream APIs).",
            "tags": [
              "validation",
              "server-side",
              "schema",
              "semgrep"
            ],
            "asvs": "ASVS v5 V2.2 Input Validation",
            "sources": "ASVS 5.0 V2.2; OWASP Input Validation Cheat Sheet; WSTG Input Validation overview",
            "priority": 3,
            "subtasks": [
              {
                "text": "Inventory inputs (all trust boundaries).",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify allow‑list checks (type, length, range, pattern).",
                "done": false,
                "hidden": false
              },
              {
                "text": "For JSON/XML APIs, review schema enforcement (and XXE defenses for XML).",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "Boundary and consistency checks (lengths, ranges, cross‑field logic)",
            "desc": "Enforce limits to prevent integer overflows, regex DoS, and business‑logic abuse; validate cross‑field consistency (e.g., ZIP/suburb).",
            "links": "https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf",
            "tools": "Burp Intruder/Turbo Intruder; ZAP fuzzer;",
            "applic": "Applicable wherever numeric/string fields exist.",
            "tags": [
              "validation",
              "fuzzing",
              "intruder",
              "zap"
            ],
            "asvs": "ASVS v5 V2.1/V2.2 (documentation & validation); V1.4 (integer/memory safety where relevant)",
            "sources": "ASVS 5.0",
            "priority": 2,
            "subtasks": [
              {
                "text": "Probe min/max, nulls, and special characters.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Fuzz with high/negative/float values; detect truncation or wrap‑around.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Check multi‑field consistency rules (server‑side).",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "Contextual output encoding & sanitisation",
        "items": [
          {
            "title": "Encode by context (HTML/attr/JS/CSS/URL); perform encoding as the final step",
            "desc": "Apply output encoding specific to the sink (HTML, attribute, JS, CSS, URL) right before use. Avoid encoding too early and never store data permanently in encoded form.",
            "links": "https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf#page=24;https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
            "tools": "Framework templating auto‑escaping; OWASP Java Encoder; secure template helpers;",
            "applic": "Applicable to any rendering path (server‑side or client‑side templating).",
            "tags": [
              "encoding",
              "xss",
              "templating"
            ],
            "asvs": "ASVS v5 V1.2 (injection prevention via correct encoding)",
            "sources": "ASVS 5.0 V1.2; OWASP XSS Prevention Cheat Sheet",
            "priority": 3,
            "subtasks": [
              {
                "text": "Identify sinks by context (HTML/body vs attribute vs JS/CSS/URL).",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify correct encoder function is used per sink.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Ensure encoding occurs immediately before rendering.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "HTML sanitisation for rich‑text inputs (as a complement to encoding)",
            "desc": "When users author HTML (e.g., WYSIWYG), sanitise untrusted markup with an allow‑list sanitizer (e.g., DOMPurify) and still encode when rendering into other contexts.",
            "links": "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html;https://github.com/cure53/DOMPurify",
            "tools": "DOMPurify; framework‑specific sanitizers;",
            "applic": "Applicable where rich‑text/HTML uploads exist.",
            "tags": [
              "sanitisation",
              "xss",
              "html"
            ],
            "asvs": "ASVS v5 V1.3 (sanitization guidance)",
            "sources": "OWASP XSS Prevention Cheat Sheet; DOMPurify",
            "priority": 2,
            "subtasks": [
              {
                "text": "Locate all rich‑text inputs.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Review sanitizer config (allowed tags/attrs/URLs).",
                "done": false,
                "hidden": false
              },
              {
                "text": "Test with benign formatting and common XSS payloads to verify safety and functionality.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "Injection testing (data stores & interpreters)",
        "items": [
          {
            "title": "SQL injection (parameterization/ORM; detection with safe probes)",
            "desc": "All queries must use parameterized APIs/ORMs. For testing, start with non‑destructive probes and confirm there’s no dynamic concatenation of untrusted input into query structure.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/README;https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf#page=25;https://github.com/sqlmapproject/sqlmap",
            "tools": "Burp (Backslash Powered Scanner, ActiveScan++); sqlmap (test env only); Nuclei templates; ffuf to discover parameters;",
            "applic": "Applicable to any data‑backed components (SQL/ORM).",
            "tags": [
              "sqli",
              "parameterization",
              "burp",
              "sqlmap",
              "nuclei",
              "ffuf"
            ],
            "asvs": "ASVS v5 V1.2.4 (parameterized DB queries)",
            "sources": "WSTG Input Validation chapter; ASVS 5.0; sqlmap",
            "priority": 3,
            "subtasks": [
              {
                "text": "Enumerate parameters and inputs reaching queries.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify prepared statements/ORM usage; no string concatenation.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Use safe payloads and error/time‑based probes in non‑prod; confirm no impact on prod data.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "NoSQL/LDAP/XPath injection",
            "desc": "Use safe query APIs for NoSQL (e.g., filter objects), escape/parameterize LDAP and XPath queries, and validate inputs to prevent structure manipulation.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection;https://github.com/codingo/NoSQLMap",
            "tools": "Burp scanners; NoSQLMap (test env); targeted payloads;",
            "applic": "Applicable if the app queries directories, XML, or NoSQL stores.",
            "tags": [
              "nosql",
              "ldap",
              "xpath",
              "injection"
            ],
            "asvs": "ASVS v5 V1.2.6/V1.2.7",
            "sources": "WSTG-INPV-06; NoSQLMap",
            "priority": 2,
            "subtasks": [
              {
                "text": "Map endpoints that query NoSQL/LDAP/XPath.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Attempt filter/object injection with benign payloads.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Confirm server uses safe query builders/param APIs.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "OS/command injection",
            "desc": "If the app shells out, ensure parameterized/safe wrappers and strict allow‑listing. Never pass raw user data to the shell.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection;https://scotthelme.co.uk/content/files/2025/06/OWASP_Application_Security_Verification_Standard_5.0.0_en.pdf#page=25",
            "tools": "Burp active checks; controlled time‑based probes in non‑prod;",
            "applic": "Applicable when invoking OS commands.",
            "tags": [
              "command-injection",
              "os",
              "injection"
            ],
            "asvs": "ASVS v5 V1.2.5",
            "sources": "WSTG-INPV-12; ASVS 5.0",
            "priority": 3,
            "subtasks": [
              {
                "text": "Identify all OS command boundaries.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify safe APIs and strict allow‑lists.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Probe with harmless metacharacters; confirm no execution.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "HTTP‑level injection & header safety",
        "items": [
          {
            "title": "HTTP response splitting/smuggling & header injection",
            "desc": "Ensure CRLF and header values are properly validated/encoded; test for splitting/smuggling between front proxies and origin.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling",
            "tools": "Burp Repeater; specialized smuggling checks; ZAP; Nuclei templates;",
            "applic": "Applicable to apps that reflect/forward header data or operate behind proxies.",
            "tags": [
              "http",
              "smuggling",
              "headers",
              "wstg"
            ],
            "asvs": "ASVS v5 V1.2.1 (HTTP header encoding) & related transport controls",
            "sources": "WSTG-INPV-15",
            "priority": 2,
            "subtasks": [
              {
                "text": "Attempt CR/LF injection into headers.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Test CL/TE desync in non‑prod.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Verify safe header construction APIs.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      },
      {
        "name": "Template & client‑side injection",
        "items": [
          {
            "title": "Server‑side template injection (SSTI)",
            "desc": "Dynamic templates must never evaluate untrusted data as code. Use strict template APIs and escaping; test with benign probes.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server_side_Template_Injection;https://github.com/epinna/tplmap",
            "tools": "Burp; tplmap/SSTImap in controlled test env;",
            "applic": "Applicable where server‑side templating is used.",
            "tags": [
              "ssti",
              "templates",
              "tplmap"
            ],
            "asvs": "ASVS v5 V1.2 (proper encoding/escaping at sink)",
            "sources": "WSTG SSTI; tplmap",
            "priority": 2,
            "subtasks": [
              {
                "text": "Find dynamic template contexts.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Inject harmless markers and observe template behavior.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Confirm strict escaping/filters in use.",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          },
          {
            "title": "Cross‑Site Scripting (Reflected, Stored, DOM)",
            "desc": "Verify contextual output encoding and safe DOM APIs. Test with non‑destructive payloads across HTML/attr/JS/URL contexts; DOM XSS requires client‑side sink/source review.",
            "links": "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting;https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting;https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",
            "tools": "Burp (Backslash Powered Scanner, ActiveScan++); ZAP; Semgrep (client‑side sinks);",
            "applic": "Applicable to any rendering of untrusted data.",
            "tags": [
              "xss",
              "encoding",
              "dom",
              "burp",
              "zap",
              "semgrep"
            ],
            "asvs": "ASVS v5 V1.2/V1.3 & V3 (web frontend)",
            "sources": "WSTG XSS tests; DOM XSS Cheat Sheet; Burp extensions",
            "priority": 3,
            "subtasks": [
              {
                "text": "Map all render contexts; verify auto‑escaping and correct encoders.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Probe with safe payloads across contexts; review DOM sources/sinks.",
                "done": false,
                "hidden": false
              },
              {
                "text": "Harden with CSP where feasible and remove dangerous APIs (e.g., eval).",
                "done": false,
                "hidden": false
              }
            ],
            "done": false,
            "hidden": false
          }
        ]
      }
    ]
  }
]